@model HomeIndexViewModel

<div class="container-fluid">
    <div class="row">
        <div class="tbmargin10 col-8">
            <div class="row vp-body-header">
                <p>You are logged in as @(Model.AppUserSession.UserIdentity.FullName) with access level: @(Model.AppUserSession.UserIdentity.AppRole?.Name).</p>
            </div>

            @if (Model.SubmissionCycles.Any())
            {
                <div class="row vp-body-header">
                    <h2>Collection Cycles open for Validation:</h2>
                </div>
                <div class="row">
                    <table class="table table-bordered table-sm table-responsive-md">
                        <thead>
                            <tr class="table-primary">
                                <th>School Year</th>
                                <th>Date Range</th>
                                <th>Collection</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var submissionCycle in Model.SubmissionCycles.OrderBy(x => x.SchoolYearDisplay).ThenBy(x => x.StartDate).ThenBy(x => x.CollectionId))
                            {
                                <tr>
                                    <td>
                                        @submissionCycle.SchoolYearDisplay
                                    </td>
                                    <td>
                                        @submissionCycle.StartDate.ToShortDateString() &ndash; @submissionCycle.EndDate.ToShortDateString()
                                    </td>
                                    <td>
                                        @submissionCycle.CollectionId
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            <!-- all notifications here -->
            <!-- add enrollment request (and responses!?) to notifications -->
            <!-- see Home Page - Notification tab in spec worksheet -->
            @if (Model.RecordsRequests.Any())
            {
                <div class="row">
                    <h2>Notifications:</h2>
                </div>
                <div class="row">
                    <table class="table table-bordered table-sm table-responsive-md" id="notificationsTable">
                        <thead>
                            <tr class="table-primary">
                                <th>
                                    Message
                                </th>
                                <th>
                                    Action
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var recordsRequest in Model.RecordsRequests)
                            {
                                <tr>
                                    <td>
                                        Unresolved Records Request from @recordsRequest.RequestingDistrictName for student @recordsRequest.StudentId
                                    </td>
                                    <td>
                                        @Html.ActionLink(
                                            "view",
                                            "ChangeOfEnrollmentReport",
                                            "Ods",
                                            new { recordRequestStudentId = recordsRequest.StudentId },
                                            new {})
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        <div class="tbmargin10 col-4">
            @{ var rnd = new Random();
                // todo what the heck?
            }
            @foreach (var announcement in Model.Announcements.OrderBy(a => a.Priority))
            {
                var cardHeader = announcement.IsEmergency ? "Urgent!" : "Announcement";
                var announcementParagraphs = (announcement.Message ?? string.Empty).Replace("\r", "").Split(new char[] { '\n' });
                var cardColor = announcement.IsEmergency ? "danger-red" : "accent-minnesota-light-gray";
                var cardId = $"card{rnd.Next(int.MaxValue)}";

                if (announcement.Expiration > DateTime.UtcNow)
                {
                    <div id="@(cardId)" class="card @(cardColor) clear-margin rounded-padded">
                        <div class="vp-body-header">@(cardHeader)</div>
                        @foreach (var paragraph in announcementParagraphs)
                        {
                            <p>@Html.Raw(paragraph)</p>
                        }
                        @if (!string.IsNullOrWhiteSpace(announcement.LinkUrl))
                        {
                            <a href="@(announcement.LinkUrl)" target="_blank">@(announcement.LinkUrl)</a>
                        }
                        @if (!string.IsNullOrWhiteSpace(announcement.ContactInfo))
                        {
                            <p>@(announcement.ContactInfo)</p>

                            @* todo... dismissing announcements seems to not be implemented
                                <!-- <button type="button" onclick="hideElement('#@(cardId)',  @(announcement.Id))" class="btn btn-sm btn-primary btn-light float-right">Dismiss</button>-->
                            *@
                        }
                    </div>
                    <br />
                }
            }
        </div>
    </div>
</div>

