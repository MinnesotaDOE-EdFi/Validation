@model AdminIndexViewModel

<div class="row">
    <div class="col-2">
        <div class="list-group" id="admin-list-tab" role="tablist">
            <a class="list-group-item list-group-item-action" id="list-error-threshold-list" data-toggle="list" href="#list-error-threshold" role="tab">School Years</a>
            <a class="list-group-item list-group-item-action" id="list-submission-cycles-list" data-toggle="list" href="#list-submission-cycles" role="tab">Submission Cycles</a>
            <a class="list-group-item list-group-item-action" id="list-messages-list" data-toggle="list" href="#list-messages" role="tab" aria-controls="messages">Rule Management</a>
            <a class="list-group-item list-group-item-action" id="list-announcements-list" data-toggle="list" href="#list-announcements" role="tab" aria-controls="settings"
               onclick="window.location.href += '?tab=announcements'">Announcements</a>
        </div>
    </div>
    <div class="col-10">
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade" id="list-error-threshold" role="tabpanel" aria-labelledby="list-error-threshold-list">
                @Html.Partial("Partials/ErrorThresholds", Model.YearsOpenForDataSubmission)
            </div>
            <div class="tab-pane fade" id="list-submission-cycles" role="tabpanel" aria-labelledby="list-submission-cycles-list">
                @Html.Partial("Partials/SubmissionCycles", @Model.RuleCollections)
            </div>
            <div class="tab-pane fade" id="list-messages" role="tabpanel" aria-labelledby="list-messages-list">...</div>
            <div class="tab-pane fade" id="list-announcements" role="tabpanel" aria-labelledby="list-announcements-list">
                @Html.Partial("Partials/Announcements", @Model.Announcements)
            </div>
        </div>
    </div>
</div>

@*Modal Section*@
@Html.Partial("Partials/AddSchoolYearModal")
@Html.Partial("Partials/AddSubmissionCycleModal")   

@Html.Hidden("tabParam", @Request.QueryString["tab"])


@section scripts {
    <script>
        /** All Error Threshold JS Functionality **/
        $("#error-threshold-warning-button").on("click", function() {
            $("#error-threshold-warning").hide();
        });

        var originalThreshold = "";
        $(document).ready(function () {
            let currentTab = $("[name='tabParam']");
            if (currentTab.val()) {
                let tabContentId = `#list-${currentTab.val()}`;
                $(tabContentId).addClass("show active");
                let tabId = `#list-${currentTab.val()}-list`;
                $(tabId).addClass("active");
            }
            else {
                $('#list-error-threshold').addClass("show active");
                $('#list-error-threshold-list').addClass("active");
            }

            var AddAnnouncementPostBackURL = "@Url.Content("~/Admin/AnnouncementAdd")";
            $("#announcement-add").click(function () {
                var options = { "backdrop": "static", keyboard: true };
                $.ajax({
                    type: "GET",
                    url: AddAnnouncementPostBackURL,
                    contentType: "application/json; charset=utf-8",
                    data: {},
                    datatype: "json",
                    success: function (data) {
                        $('#announcement-modal-content').html(data);
                        $('#announcementModal').modal(options);
                        $('#announcementModal').modal('show');

                    },
                    error: function () {
                        alert("Could not open a dialog to create an announcement.");
                    }
                });
            });

            var EditAnnouncementPostBackURL = "@Url.Content("~/Admin/AnnouncementEdit")";
            $(".announcement-edit").click(function () {
                var $buttonClicked = $(this);
                var id = $buttonClicked.attr('data-id');
                var options = { "backdrop": "static", keyboard: true };
                $.ajax({
                    type: "GET",
                    url: EditAnnouncementPostBackURL,
                    contentType: "application/json; charset=utf-8",
                    data: { "Id": id },
                    datatype: "json",
                    success: function (data) {
                        $('#announcement-modal-content').html(data);
                        $('#announcementModal').modal(options);
                        $('#announcementModal').modal('show');
                    },
                    error: function () {
                        alert("Could not retrieve the announcement for editing.");
                    }
                });
            });

            var DeleteAnnouncementPostBackURL = "@Url.Content("~/Admin/DeleteAnnouncement")";
            $(".announcement-delete").click(function () {
                var $buttonClicked = $(this);
                var id = $buttonClicked.attr('data-id');
                if (confirm("Are you sure you want to delete this announcement?")) {
                    $.ajax({
                        type: "DELETE",
                        url: `${DeleteAnnouncementPostBackURL}/${id}`,
                        success: function (data) {
                            location.reload(true);
                        },
                        error: function () {
                            alert("Could not delete the announcement.");
                        }
                    });
                }
            });



            $(".save-row").hide();
            $(".cancel-row").hide();
            $(".remove-row").hide();

            $(".edit-row").on("click", function (event) {
                event.preventDefault();
                var tblRow = $(this).closest('tr');

                tblRow.find('.save-row').show();
                tblRow.find('.cancel-row').show();
                tblRow.find('.remove-row').show();

                tblRow.find('.edit-row').hide();

                // Make the whole row editable
                tblRow.find('.row-data')
                    .attr('contenteditable', 'true')
                    //.addClass('bg-warning')
                    .css('padding', '3px')
                    .focus();

                // Save original threshold value just in case of canceled use
                originalThreshold = tblRow.find('.row-data')[0].innerText;
            });

            $(".cancel-row").on('click', function (event) {
                event.preventDefault();

                var tblRow = $(this).closest('tr');

                tblRow.find('.save-row').hide();
                tblRow.find('.cancel-row').hide();
                tblRow.find('.remove-row').hide();

                tblRow.find('.edit-row').show();

                // Make the whole row editable
                tblRow.find('.row-data')
                    .attr('contenteditable', 'false')
                    .removeClass('bg-warning')
                    .removeClass('bg-danger')
                    .css('padding', '');

                // If canceled we can put in the original data they started with.
                tblRow.find('.row-data')[0].innerText = originalThreshold;
            });

            $(".save-row").on('click', function (event) {
                event.preventDefault();
                var tblRow = $(this).closest('tr');

                // Clear all white space with regex
                var threshold = tblRow.find('.row-data')[0].innerText.replace(/\s/g, "");
                var id = tblRow[0].cells[0].innerText;

                // Validate and update the threshold
                if (isNaN(threshold)) {
                    $('#error-threshold-warning').show();
                }
                else {
                    // This is to make sure the threshold does not appear with extra white spaces.
                    tblRow.find('.row-data')[0].innerText = threshold;

                    var successValue = updateThreshold(id, threshold);

                    // Ajax returns a captial T true instead of boolean
                    if (successValue != "True") {
                        $("#error-threshold-warning").show();
                    }
                    // Otherwise return it back to original state.
                    else {
                        tblRow.find('.save-row').hide();
                        tblRow.find('.cancel-row').hide();
                        tblRow.find('.remove-row').hide();

                        tblRow.find('.edit-row').show();

                        tblRow.find('.row-data')
                            .attr('contenteditable', 'false')
                            .removeClass('bg-danger')
                            .removeClass('bg-warning')
                            .css('padding', '');
                    }
                }
            });

            // Setting the end year for the user in the add error threshold.
            $("#add-start-year").change(function () {
                $("#add-end-year").val(Number($("#add-start-year").val()) + 1);
            });

            // Initialise the date pickers for Admin/Partials/AddSubmissionCycleModal.cshtml.
            $('#start-date-picker').datetimepicker({ format: 'L' });
            $('#end-date-picker').datetimepicker({ format: 'L' });

            $('#announcementModal').on('shown.bs.modal', function () {
                setAnnouncementHeaderText();
                $('#edit-expiration-date-picker').datetimepicker({ format: 'L' });
                $("#save-announcement").click(saveAnnouncement);
            });
        });

        function saveAnnouncement(event) {
            var SaveAnnouncementPostBackURL = "@Url.Content("~/Admin/SaveAnnouncement")";
            event.preventDefault();
            var id = $('#modal-announcement-id').val();
            var priority = $('#edit-priority').val();
            if ($.trim(priority).length === 0) {
                priority = 0;
            }
            var message = $('#edit-message').val();
            var contactInfo = $('#edit-contactInfo').val();
            var linkUrl = $('#edit-linkUrl').val();
            var expirationDate = $('#edit-expiration-date-picker').val();
            var options = { "backdrop": "static", keyboard: true };
            var dataObj = { id: id, priority: priority, message: message, contactInfo: contactInfo, linkUrl: linkUrl, expiration: expirationDate };
            var jsonData = JSON.stringify(dataObj);
            $.ajax({
                type: "POST",
                url: SaveAnnouncementPostBackURL,
                contentType: "application/json; charset=utf-8",
                data: jsonData,
                datatype: "json",
                success: function (data) {
                    var tempData = $(data);
                    let announcementValidationSummaryContents = "";
                    let announcementValidationSummary = tempData.find('#announcement-validation-summary-row');
                    if (announcementValidationSummary) {
                        announcementValidationSummaryContents = announcementValidationSummary.text();
                    }
                    // If announcementValidationSummaryContents contains more than just whitespace,
                    // then validation summary contains errors, and we should re-show the modal
                    if ($.trim(announcementValidationSummaryContents).length > 0) {
                        $('#announcement-modal-content').html(data);
                        $('#announcementModal').modal(options);
                        $('#announcementModal').modal('show');
                        // Need to reattach event handlers to some of the modal's fields, because
                        // when the modal's HTML got repopulated above, the event handlers disappeared
                        setAnnouncementHeaderText();
                        $('#edit-expiration-date-picker').datetimepicker({ format: 'L' });
                        $("#save-announcement").click(saveAnnouncement);
                    }
                    else {
                        let locationUrl = location.href;
                        let urlContainsAnnouncements = locationUrl.includes('announcements');
                        if (!urlContainsAnnouncements) {
                            location.href = `${location.href}?tab=announcements`;
                        }
                        location.reload(true);
                    }
                },
                error: function (data) {
                    $('#announcement-modal-content').html(data);
                    $('#announcementModal').modal(options);
                    $('#announcementModal').modal('show');
                    // Need to reattach event handlers to some of the modal's fields, because
                    // when the modal's HTML got repopulated above, the event handlers disappeared
                    $('#edit-expiration-date-picker').datetimepicker({ format: 'L' });
                    $("#save-announcement").click(saveAnnouncement);
                }
            });
        }

        function setAnnouncementHeaderText() {
            let announcementHeader = $('#announcement-header');
            var id = $('#modal-announcement-id').val();
            if (id > 0) {
                announcementHeader.text("Edit Announcement");
            }
        }

        function updateThreshold(id, errorThreshold) {
            var value;
            $.ajax({
                url: '@(Url.Action("UpdateThresholdErrorValue", "Admin"))',
                async: true,
                data: { Id: id, thresholdValue: errorThreshold },
                success: function (result) {
                    value = result;
                }
            });
            return value;
        }

        function submitNewSchoolYears() {
            $("#submit-school-years-form").submit();
        }

        function removeSchoolYear(id, yearsRange) {
            if (confirm("Are you sure you want to delete " + yearsRange + "?")) {
                $.ajax({
                    url: '@(Url.Action("RemoveSchoolYear", "Admin"))',
                    async: false,
                    data: { Id: id },
                    success: function () {
                        location.reload();
                    }
                });
            }
        }
        /** End **/

        /** All Submission Row JS Functionality **/
        $("#collection-list").bind('change', function () {
            $.ajax({
                url: '@(Url.Action("GetSubmissionCyclesByCollectionId", "Admin"))',
                async: true,
                data: { collectionId: $("#collection-list").val() },
                success: function (data) {
                    $("#submission-rows").html(data);
                }
            });
        });

        // Inserting and removing rows for submission cycle.

        function removeSubmissionCycle(id, collectionId, cycleDates) {
            if (confirm("Are you sure you want to delete " + cycleDates + " for " + collectionId +"?")) {
                $.ajax({
                    url: '@(Url.Action("RemoveSubmissionCycle", "Admin"))',
                    async: true,
                    data: { id : id, collectionId : collectionId },
                    success: function (data) {
                        $("#submission-rows").html(data);
                    }
                });
            }
        }

        function addSubmissionCycle() {
            console.log($("#collection-list").val());
            $.ajax({
                url: '@(Url.Action("AddSubmissionCycle", "Admin"))',
                async: true,
                data: { collectionId: $("#collection-list").val(), startDate: $("#start-date-picker").val(), endDate: $("#end-date-picker").val() },
                success: function (data) {
                    $("#submission-rows").html(data);
                }
            });
        }
        /** End **/

    </script>
}