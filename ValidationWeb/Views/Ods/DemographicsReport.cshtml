@model OdsDemographicsReportViewModel

<div id="pagetop" class="row ">
</div>
<div class="row tbmargin10">
    @if (Model.IsStateMode)
    {
        <div class="vp-body-header justify-content-start align-self-center">Ancestry Ethnic Origin and Race Counts for All Minnesota Districts</div>
    }
    else
    {
        <div class="vp-body-header justify-content-start align-self-center">Ancestry Ethnic Origin and Race Counts for District @Model.EdOrgName (@Model.EdOrgId.ToString())</div>

        if (Model.SchoolId.HasValue && !string.IsNullOrWhiteSpace(Model.SchoolName))
        {
            <div class="vp-body-header justify-content-start align-self-center">
                For @Model.SchoolName (@Model.SchoolId)
            </div>
        }
    }

    @if (Model.IsStateMode)
    {
        <div class="col-md-2"><a href="@Url.Action("DemographicsReport", "Ods", new { isStateMode = false })" class="show-data-loading">View Single District</a></div>
    }
    else
    {
        <div class="col-md-2"><a href="@Url.Action("DemographicsReport", "Ods", new { isStateMode = true })" class="show-data-loading">View All Districts</a></div>
    }
</div>
<div class="row">
    <div class="col-md-3 offset-9 text-right"><a href="#notes">View Report notes</a></div>
</div>
<div id="requestedReportContent" class="row">
    @Html.Partial("DemographicsReportTable", Model)
</div>

@section scripts  {
    <script type="text/javascript">
        $(function() {
            var drillDownLinkTemplate =
                '<a href="@Html.Raw(Url.Action("DemographicsReport", "Ods", new { schoolId = "_EdOrgId_", drillDownColumnIndex = "_DrillDownIndex_", isStateMode = Model.IsStateMode, districtToDisplay = "_EdOrgId_", isStudentDrillDown = true, orgType = "_OrgType_" }))" target="_blank">_LinkText_</a>';

            function createDrillDownLink(edOrgId, drillDownIndex, orgType, linkText) {
                return drillDownLinkTemplate
                    .replace(/_EdOrgId_/g, edOrgId)
                    .replace(/_DrillDownIndex_/g, drillDownIndex)
                    .replace(/_OrgType_/g, orgType)
                    .replace(/_LinkText_/g, linkText);
            }

            var stateLinkTemplate =
                '<a href="@Html.Raw(Url.Action("DemographicsReport", "Ods", new { isStateMode = false, districtToDisplay = "_EdOrgId_" }))" class="show-data-loading">_EdOrgId_</a>';

            function createStateLink(edOrgId) {
                return stateLinkTemplate.replace(/_EdOrgId_/g, edOrgId);
            }
            
            $('div.dataTables_scrollBody').css('min-height', '350px');
            
            var dataTable = $('#reportsTable').DataTable({
                paging: true,
                info: false,
                scrollX: true,
                scrollY: '350px',
                scrollCollapse: true,
                deferRender: true, 
                searching: false,
                serverSide: true,
                processing: true,
                scroller: {
                    loadingIndicator: true
                },
                fnInitComplete: function(){
                    $('div.dataTables_scrollBody').css('min-height', 0);         
                },
                ajax: {
                    url: "@Html.Raw(Url.Action(
                              "GetDemographicsReportData",
                              new
                              {
                                  edOrgId = Model.EdOrgId,
                                  fourDigitSchoolYear = Model.FourDigitSchoolYear,
                                  isStateMode = Model.IsStateMode,
                              }))"
                },
                columns: [
                    {
                        title: 'ID',
                        data: 'edOrgId',
                        width: '100px',
                        @if (Model.IsStateMode)
                        {
                            <text>
                        render: function(data, type, row, meta) {
                            if (data != null && type === 'display' && row.OrgType === 200) {
                                return createStateLink(data);
                            } else {
                                return data;
                            }
                        }
                            </text>
                        }
                    },
                    {
                        title: 'District/School',
                        width: '300px',
                        data: 'leaSchool'
                    },
                    {
                        title: 'Cumulative Enrollments',
                        data: 'enrollmentCount',
                        render: function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 0, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        title: 'Demographics Records',
                        data: 'demographicsCount',
                        render: function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 1, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        title: 'Students with Race Submitted',
                        data: 'raceGivenCount',
                        render: function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 2, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        title: 'Students with AEO Submitted',
                        data: 'ancestryGivenCount',
                        render: function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 3, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    }
                ]
            });

            $(dataTable.table().header()).addClass('table-primary');
        });
    </script>
}

<div id="notes" class="row">
    <div class="vp-body-header">Notes:</div>
</div>
<div class="row">(1) A student enrolled in multiple schools within the district is only counted once.</div>
<div class="row">(2) A student is counted as enrolled if the student was enrolled at least once during the school year.</div>
<div class="row">(3) Students are counted only once per table cell for the particular school/district/state.</div>
<div class="row tbmargin10">
    <div class="col-md-2">
        <a href="#pagetop">Back to Top</a>
    </div>
</div>


