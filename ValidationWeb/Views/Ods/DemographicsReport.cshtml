@model OdsDemographicsReportViewModel

<div id="pagetop" class="row tbmargin10">
    <div><a href="#notes" class="vp-page-link"><i class="fas fa-arrow-alt-circle-down"></i> See notes</a></div>
    @if (Model.IsStateMode)
    {
        <div><a href="@Url.Action("DemographicsReport", "Ods", new { isStateMode = false })" class="vp-page-link show-data-loading"><i class="fas fa-chalkboard-teacher"></i> View Single District</a></div>
    }
    else
    {
        <div><a href="@Url.Action("DemographicsReport", "Ods", new { isStateMode = true })" class="vp-page-link show-data-loading"><i class="fas fa-sitemap"></i> View All Districts</a></div>
    }
</div>
<div class="row tbmargin10">
    @if (Model.IsStateMode)
    {
        <div class="vp-body-header justify-content-start align-self-center">Ancestry Ethnic Origin and Race Counts for All Minnesota Districts</div>
    }
    else
    {
        <div class="vp-body-header justify-content-start align-self-center">Ancestry Ethnic Origin and Race Counts for District @Model.EdOrgName (@Model.EdOrgId.ToString())</div>

        if (Model.SchoolId.HasValue && !string.IsNullOrWhiteSpace(Model.SchoolName))
        {
            <div class="vp-body-header justify-content-start align-self-center">
                For @Model.SchoolName (@Model.SchoolId)
            </div>
        }
    }
</div>
<div id="requestedReportContent" class="row">
    <div class="col-md-12 nopadding">
        <table class="table table-sm table-bordered table-hover" id="reportsTable" style="width: 100%"></table>
    </div>
</div>
@*<div id="__requestedReportContent" class="row">
    <table class="table table-sm table-responsive-md table-bordered table-hover  " id="__reportsTable">
        <tr class="table-primary">
            <th>ID</th>
            <th>District/School</th>
            <th>Cumulative Enrollments</th>
            <th>Demographics Records</th>
            <th>Students with Race Submitted</th>
            <th>Students with AEO Submitted</th>
        </tr>
        @foreach (var result in Model.Results.Take(10))
        {
            <tr>
                <td>
                    @if (Model.IsStateMode)
                    {
                        if (result.EdOrgId.HasValue && result.OrgType == OrgType.District)
                        {
                            <a href="@Url.Action("DemographicsReport", "Ods", new { isStateMode = false, districtToDisplay = result.EdOrgId.Value})" class="show-data-loading">@(result.EdOrgId.Value.ToString())</a>
                        }
                        else
                        {
                            @(result.EdOrgId.HasValue ? result.EdOrgId.Value.ToString() : string.Empty)
                        }
                    }
                    else
                    {
                        @(result.EdOrgId.HasValue ? result.EdOrgId.Value.ToString() : string.Empty)
                    }
                </td>
                <td>@(result.LEASchool)</td>
                <td><a href="@Url.Action("DemographicsReport", "Ods", new { schoolId = result.EdOrgId, drillDownColumnIndex = 0, isStateMode = Model.IsStateMode, districtToDisplay = result.EdOrgId, isStudentDrillDown = true, orgType = result.OrgType})" target="_blank">@(result.EnrollmentCount.ToString())</a></td>
                <td><a href="@Url.Action("DemographicsReport", "Ods", new { schoolId = result.EdOrgId, drillDownColumnIndex = 1, isStateMode = Model.IsStateMode, districtToDisplay = result.EdOrgId, isStudentDrillDown = true, orgType = result.OrgType})" target="_blank">@(result.DemographicsCount.ToString())</a></td>
                <td><a href="@Url.Action("DemographicsReport", "Ods", new { schoolId = result.EdOrgId, drillDownColumnIndex = 2, isStateMode = Model.IsStateMode, districtToDisplay = result.EdOrgId, isStudentDrillDown = true, orgType = result.OrgType})" target="_blank">@(result.RaceGivenCount.ToString())</a></td>
                <td><a href="@Url.Action("DemographicsReport", "Ods", new { schoolId = result.EdOrgId, drillDownColumnIndex = 3, isStateMode = Model.IsStateMode, districtToDisplay = result.EdOrgId, isStudentDrillDown = true, orgType = result.OrgType})" target="_blank">@(result.AncestryGivenCount.ToString())</a></td>
            </tr>
        }
    </table>
</div>*@


@if (Model.Results.Count == 0)
{
    <div class="vp-body-header col-8 justify-content-start align-self-center">No records were found.</div>
}
<div id="notes" class="row">
    <div class="vp-body-header">Notes:</div>
</div>
<div class="row">(1) A student enrolled in multiple schools within the district is only counted once.</div>
<div class="row">(2) A student is counted as enrolled if the student was enrolled at least once during the school year.</div>
<div class="row">(3) Students are counted only once per table cell for the particular school/district/state.</div>
<div class="row tbmargin10">
    <a href="#pagetop" class="vp-page-link"><i class="fas fa-arrow-alt-circle-up"></i> Back to Top</a>
</div>


@section scripts {
    <script>

        $(document).ready(function() {
            var data = @Html.Raw(Json.Encode(Model.Results.Take(100)));
            debugger;
            var drillDownLinkTemplate =
                '<a href="@Html.Raw(Url.Action("DemographicsReport", "Ods", new { schoolId = "_EdOrgId_", drillDownColumnIndex = "_DrillDownIndex_", isStateMode = Model.IsStateMode, districtToDisplay = "_EdOrgId_", isStudentDrillDown = true, orgType = "_OrgType_" }))" target="_blank">_LinkText_</a>';

            function createDrillDownLink(edOrgId, drillDownIndex, orgType, linkText) {
                return drillDownLinkTemplate
                    .replace(/_EdOrgId_/g, edOrgId)
                    .replace(/_DrillDownIndex_/g, drillDownIndex)
                    .replace(/_OrgType_/g, orgType)
                    .replace(/_LinkText_/g, linkText);
            }

            var stateLinkTemplate =
                '<a href="@Html.Raw(Url.Action("DemographicsReport", "Ods", new { isStateMode = false, districtToDisplay = "_EdOrgId_" }))" class="show-data-loading">_EdOrgId_</a>';

            function createStateLink(edOrgId) {
                return stateLinkTemplate.replace(/_EdOrgId_/g, edOrgId);
            }

            var dataTable = $('#reportsTable').DataTable({
                'data': data,
                responsive: false,
                fixedHeader: true,
                paging: false,
                'info': false,
                scrollY: '450px',
                scrollCollapse: true,
                searching: false,
                deferRender: true,

                columns: [
                    {
                        'title': 'ID',
                        'data': 'EdOrgId',
                        // todo: test render in state mode, it should be a link if IsStateMode && OrgType.District
                        @if (Model.IsStateMode) {
                            <text>
                        'render': function (data, type, row, meta) {
                                if (data != null && type === 'display' && row.OrgType === 200) {
                                    return createStateLink(data);
                                } else {
                                    return data;
                                }
                            }
                            </text>
                        }
                    },
                    {
                        'title': 'District/School',
                        'data': 'LEASchool'
                    },
                    {
                        'title': 'Cumulative Enrollments',
                        'data': 'EnrollmentCount',
                        'render': function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 0, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        'title': 'Demographics Records',
                        'data': 'DemographicsCount',
                        'render': function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 1, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        'title': 'Students with Race Submitted',
                        'data': 'RaceGivenCount',
                        'render': function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 2, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    },
                    {
                        'title': 'Students with AEO Submitted',
                        'data': 'AncestryGivenCount',
                        'render': function(data, type, row, meta) {
                            if (type === 'display') {
                                return createDrillDownLink(row.EdOrgId, 3, row.OrgType, data);
                            } else {
                                return data;
                            }
                        }
                    }
                ]
            });

            $(dataTable.table().header()).addClass('table-primary');
        });
    </script>
}
,