@using ValidationWeb.Models
@model DynamicReportViewModel


<div class="row">
    <h2 class="vp-body-header col-8 justify-content-start align-self-center">Dynamic Reports</h2>
</div>

<form>
    <div class="form-group row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-3 pull-right text-right">
                    <label for="selectDataView" class="text-right col-form-label col-form-label-sm">Report Name</label>
                </div>
                <div class="nav-item col-sm-6">
                    <select class="form-control validation-dropdown-menu" id="selectDataView" name="selectDataView" style="width: 100%">
                        <option selected="selected" value="">- make a selection -</option>
                    </select>
                </div>
            </div>
            <div class="row" style="margin-top: 15px; display:none" id="selectWrapper">
                <div class="col-md-12">
                    <select multiple="multiple" size="15" class="form-control form-control-sm" id="fieldSelect" name="fieldSelect[]"></select>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-3">
                    <button type="button" style="margin-top: 15px; display:none" id="generateReport" class="btn prime-blue white-heavy-text margin10 justify-self-end">Generate Report</button>
                </div>
            </div>
        </div>
        <div class="col-sm-4 offset-1">
            <h4 id="reportTitle"></h4>
            <p id="reportDescription"></p>
        </div>
    </div>

</form>

@section scripts
{
    <script type="text/javascript">

        var viewData = {};

        $(document).on('focus',
            '.select2.select2-container',
            function(e) {
                // console.log("%c Focus Event ", "background:green; color:white", e);

                var initialFocusEvent = e.originalEvent; //don't re-open on close focus event
                var targetIsInput = e.target && $(e.target).is("input"); // don't open when focused from input
                var relTargetIsInput = e.relatedTarget && $(e.relatedTarget).is("input");
                var anyTargetIsInput = targetIsInput || relTargetIsInput;

                // only open on original attempt - close focus event should not fire open
                if (initialFocusEvent && !anyTargetIsInput) {
                    // console.log("%c Call Select2 Open ", "background:orange; color:white");
                    $(this).siblings('select').select2('open');
                }
            });

        $(document).ready(function() {

            $('#selectDataView').select2({
                minimumResultsForSearch: Infinity,
                dropdownAutoWidth: true,
                width: 'resolve'
            });

            $('#generateReport').on('click', createReport);

            var selectElement = $('select[name="fieldSelect[]"]');

            var fieldSelect = selectElement
                .hide()
                .bootstrapDualListbox({
                    nonSelectedListLabel: 'Available Fields',
                    selectedListLabel: 'Selected Fields',
                    //preserveSelectionOnMove: 'moved',
                    moveOnSelect: false,
                    selectorMinimalHeight: 200
                });

            selectElement.on('change',
                function(e) {
                    var newState = $(this).val();

                    var generateReport = $('#generateReport');
                    if (newState && newState.length) {
                        generateReport.show();
                    } else {
                        generateReport.hide();
                    }
                });

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetReportDefinitions", "Dynamic")?schoolYearId=@Model.SchoolYear.Id',
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                success: function(data) {
                    var selectDataView = $('#selectDataView');
                    selectDataView.empty();
                    selectDataView.append($('<option>', { value: '', text: '- select a report -' }));
                    $.each(data,
                        function(i, item) {
                            selectDataView.append($('<option>', { value: item.Id, text: item.Name }));
                            viewData[item.Id] = item;
                        });
                }
            });

            var dualListContainer = fieldSelect.bootstrapDualListbox('getContainer');
            dualListContainer.find('.moveall').text('').addClass('fa fa-angle-double-right');
            dualListContainer.find('.removeall').text('').addClass('fa fa-angle-double-left');
            dualListContainer.find('.move').text('').addClass('fa fa-angle-right');
            dualListContainer.find('.remove').text('').addClass('fa fa-angle-left');
            dualListContainer.find('.btn').addClass('prime-blue white-heavy-text');

            $("#selectDataView").change(function(e) {
                var dataView = $(this).val();

                if (!dataView) {
                    $('#selectWrapper').hide();
                    return;
                }

                $('#selectWrapper').show();
                $('#generateReport').hide();

                var rules = viewData[dataView];
                $('#reportTitle').text(rules.Name)
                $('#reportDescription').text(rules.Description);

                if (dataView.length > 0) {

                    var select = $('#fieldSelect');
                    select.empty();

                    $.each(rules.Fields,
                        function(index, value) {
                            if (value.Enabled) {
                                select.append($('<option>',
                                    {
                                        value: value.Id,
                                        text: (value.Description ? value.Description : value.Field.Name)
                                    }));
                            }
                        });

                    fieldSelect.bootstrapDualListbox('refresh');
                    $(this).blur();
                    fieldSelect.focus();
                }
            });
        });

        function createReport() {

            var reportRequest = {
                ReportDefinitionId: $('#selectDataView').val(),
                SchoolYearId: '@Model.SchoolYear.Id',
                SelectedFields: $('select[name="fieldSelect[]"]').val()
            };

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                var a;
                if (xhttp.readyState === 4 && xhttp.status === 200) {
                    // Trick for making downloadable link
                    a = document.createElement('a');
                    a.href = window.URL.createObjectURL(xhttp.response);
                    // Give filename you wish to download
                    a.download = $('#selectDataView option:selected').text() + '-@(Model.SchoolYear.EndYear).csv';
                    a.style.display = 'none';
                    document.body.appendChild(a);
                    a.click();
                }
            };
            // Post data to URL which handles post request
            xhttp.open("POST", '@Url.Action("GenerateReport", "Dynamic")');
            xhttp.setRequestHeader("Content-Type", "application/json");
            xhttp.responseType = 'blob';
            xhttp.send(JSON.stringify(
                {
                    'request': reportRequest,
                    'districtId': '@Model.FocusedEdOrg.Id'
                }));
    }
    </script>
}
